% Armando Diaz Tolentino <ajdt@cs.washington.edu> 
% 
% This file encodes a solver for the equations
% generated by eqn_generator.lp
%
% NOTE: this file depends on eqn_rule for the rules used to solve an equation!
#const max_steps = 5.
_step(1..max_steps).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FACTS BETWEEN STEPS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
_holds(Node, Info, 1)								:-	_initially(Node, Info).

_holds(Node, Info, S+1) 	:-	_holds(Node, Info, S),
								_step(S+1),
								not _tempNode(Node),
								not _remove(Node, Info, S).

_remove(Node, _nodeInfo(FieldName, FieldValue), S) 	:-	_update(Node, _nodeInfo(FieldName, NewValue), S),
														_holds(Node, _nodeInfo(FieldName, FieldValue), S).
_remove(Node, _treeInfo(FieldName, FieldValue), S) 	:-	_update(Node, _treeInfo(FieldName, NewValue), S),
														_holds(Node, _treeInfo(FieldName, FieldValue), S).


% 						### Introducing facts
%--------------------------------------------------------------------------------
% Note: to update a field means to remove old field and add the new field value
_holds(Node, Info, S+1) 	:-	_introduce(Node, Info, S),
								_step(S+1).
_holds(Node, Info, S+1) 	:-	_update(Node, Info, S),
								_step(S+1).

				%selecting rules
% select no more than one action per step
{ _doAction(Action, S) : _applicable(Action, S) } 1 :- _step(S).
:- _step(Step), 2 { _doAction(Action, Step) : _applicable(Action, Step) }.
% NOTE: polynomial rules can instantiate a _doAction() to force next action in a sequence of steps

				% ensure all steps are done first
_actionForStep(S) :- _doAction(Action,S).
:- _step(S), _step(S+1), not _actionForStep(S), _actionForStep(S+1).

% predicate used to project based on actions taken
action(Name) :- _doAction(_action(Name, Data), S).

#show _holds/3.
#show _doAction/2.
#show action/1.
#show ruleParam/3.
